package tracer

import (
	"context"
	"fmt"
	"path/filepath"

	libcommon "github.com/erigontech/erigon-lib/common"
	"github.com/erigontech/erigon-lib/common/datadir"
	"github.com/erigontech/erigon-lib/config3"
	"github.com/erigontech/erigon-lib/kv"
	"github.com/erigontech/erigon-lib/kv/mdbx"
	"github.com/erigontech/erigon-lib/kv/temporal"
	"github.com/erigontech/erigon-lib/log/v3"
	libstate "github.com/erigontech/erigon-lib/state"

	"github.com/erigontech/erigon-db/rawdb"
	"github.com/erigontech/erigon/core/state"
	"github.com/erigontech/erigon/rpc/rpchelper"
)

func GetContractCode(chainData string, address libcommon.Address, blockNumber uint64) ([]byte, error) {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	tx, err := db.BeginRo(context.Background())
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()

	// Create a state reader for the specific block
	dirs := datadir.New(filepath.Dir(chainData))
	agg, err := libstate.NewAggregator(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return nil, err
	}

	err = agg.OpenFolder()
	if err != nil {
		return nil, err
	}

	tdb, err := temporal.New(db, agg)
	if err != nil {
		return nil, err
	}
	stateReader := state.NewHistoryReaderV3()
	temporalTx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return nil, err
	}
	defer temporalTx.Rollback()

	stateReader.SetTx(temporalTx)
	stateReader.SetTxNum(agg.EndTxNumMinimax())

	// Read the contract code
	code, err := stateReader.ReadAccountCode(address)
	if err != nil {
		return nil, fmt.Errorf("reading contract code: %w", err)
	}

	if len(code) > 0 {
		return code, nil
	}

	stateDB := state.New(stateReader)
	code, err = stateDB.GetCode(address)
	if err != nil {
		return nil, fmt.Errorf("getting contract code: %w", err)
	}

	return code, nil
}

func GetLatestsBLockInStateDb(chainData string) (uint64, error) {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	tx, err := db.BeginRo(context.Background())
	if err != nil {
		return 0, err
	}
	defer tx.Rollback()

	// Try multiple approaches to get the latest block number

	// Approach 1: Use rpchelper.GetLatestBlockNumber (most robust)
	blockNum, err := rpchelper.GetLatestBlockNumber(tx)
	if err == nil {
		fmt.Println("rpc helper block num ", blockNum)
		return blockNum, nil
	}

	// Approach 2: Try ReadCurrentHeader
	//	//latestBlock := rawdb.ReadCurrentHeader(tx)
	//	//if latestBlock != nil {
	//	//	//fmt.Println("read the header")
	//	//	//return latestBlock.Number.Uint64(), nil
	//	}
	// Approach 3: Try reading head hash directly
	headHash := rawdb.ReadHeadHeaderHash(tx)
	if headHash != (libcommon.Hash{}) {
		fmt.Println("read the hash it")
		headNumber := rawdb.ReadHeaderNumber(tx, headHash)
		if headNumber != nil {
			return *headNumber, nil
		}
	}

	return 0, fmt.Errorf("could not read latest block number from database")
}

func GetContractCodeWithReaderV3(chainData string, address libcommon.Address) ([]byte, error) {
	logger := log.New()

	// Database setup
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	// Set up aggregator and domains
	dirs := datadir.New(filepath.Dir(chainData))
	agg, err := libstate.NewAggregator(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return nil, err
	}
	defer agg.Close()

	err = agg.OpenFolder()
	if err != nil {
		return nil, err
	}

	// Create temporal transaction
	tdb, err := temporal.New(db, agg)
	if err != nil {
		return nil, err
	}
	defer tdb.Close()

	temporalTx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return nil, err
	}
	defer temporalTx.Rollback()

	// Create shared domains
	domains, err := libstate.NewSharedDomains(temporalTx, logger)
	if err != nil {
		return nil, err
	}
	defer domains.Close()

	// Create ReaderV3 - the key component
	r := state.NewReaderV3(domains.AsGetter(temporalTx))

	// First, read account data to get the correct incarnation
	acc, err := r.ReadAccountData(address)
	if err != nil {
		return nil, fmt.Errorf("reading account data: %w", err)
	}
	if acc == nil {
		return nil, fmt.Errorf("account not found")
	}

	fmt.Printf("Account found - Incarnation: %d, Balance: %s, Nonce: %d\n",
		acc.Incarnation, acc.Balance.String(), acc.Nonce)
	fmt.Printf("Is empty code hash: %t\n", acc.IsEmptyCodeHash())

	// Read contract code using the account's actual incarnation
	code, err := r.ReadAccountCode(address)
	if err != nil {
		return nil, fmt.Errorf("reading contract code: %w", err)
	}

	fmt.Printf("Code size: %d bytes\n", len(code))

	codeBytes, found, err := temporalTx.GetLatest(kv.CodeDomain, address[:])
	if err != nil {
		fmt.Printf("Error querying code domain: %v\n", err)
	} else {
		fmt.Printf("Direct code domain query - Found: %t, Size: %d\n", found, len(codeBytes))
	}
	fmt.Println("code bytes ", len(codeBytes))

	hr := state.NewHistoryReaderV3()
	hr.SetTx(temporalTx)
	hr.SetTxNum(domains.TxNum())
	historicalCode, err := hr.ReadAccountCode(address)
	if err != nil {
		fmt.Printf("Historical code read error: %v\n", err)
	} else {
		fmt.Printf("Historical code size: %d\n", len(historicalCode))
	}

	return code, nil
}

func GetContractCodeViaState(chainData string, address libcommon.Address) ([]byte, error) {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	/*tx, err := db.BeginRo(context.Background())
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()
	*/
	// Set up domains for state access
	dirs := datadir.New(filepath.Dir(chainData))
	agg, err := libstate.NewAggregator(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return nil, err
	}

	err = agg.OpenFolder()
	if err != nil {
		return nil, err
	}

	// Create temporal transaction for state access
	tdb, err := temporal.New(db, agg)
	if err != nil {
		return nil, err
	}
	temporalTx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return nil, err
	}
	defer temporalTx.Rollback()

	// Create state reader - this is the key component
	domains, err := libstate.NewSharedDomains(temporalTx, logger)
	if err != nil {
		return nil, err
	}
	latestTx := domains.TxNum()
	fmt.Println("latests tx ", latestTx)
	defer domains.Close()
	r := state.NewReaderV3(domains.AsGetter(temporalTx))
	code, err := r.ReadAccountCode(libcommon.BytesToAddress(address[:]))
	if err != nil {
		return nil, fmt.Errorf("reading contract code: %w", err)
	}
	fmt.Println("code size ", len(code))

	rw := state.NewHistoryReaderV3()
	rw.SetTx(temporalTx)
	rw.SetTxNum(latestTx)
	acc, err := rw.ReadAccountData(address)
	if err != nil /*|| acc.IsEmptyCodeHash()*/ {
		return nil, err
	}
	if acc != nil {
		fmt.Println("Incarnation ", acc.Incarnation)
		fmt.Println("Balance ", acc.Balance)
		fmt.Println("Nonce ", acc.Nonce)
		fmt.Println("Initialised ", acc.Initialised)
		fmt.Println("Is empty codehash?", acc.IsEmptyCodeHash())
	}

	code, err = rw.ReadAccountCode(libcommon.BytesToAddress(address[:]))
	if err != nil {
		return nil, fmt.Errorf("reading contract code: %w", err)
	}
	fmt.Println("code size ", len(code))

	return code, nil
}

/*
func GetLatestsTransactionInfo(chainData string) error {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	tx, err := db.BeginRo(context.Background())
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Read the block header to get block data
	headHash := rawdb.ReadHeadHeaderHash(tx)

	// Read the block body to get transactions
	body, err := rawdb.ReadBodyWithTransactions(tx, headHash)
	if err != nil {
		return fmt.Errorf("failed to read block body: %w", err)
	}
	if body == nil {
		return fmt.Errorf("block body %d not found", blockNumber)
	}

	// Find the actual transaction in the block
	for i, _ := range body.Transactions {
		fmt.Println("so many txs ... ", i)
	}
	return nil
}*

/*
func NewStateDbAA(chainData string) (*state.IntraBlockState, error) {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()

	dirs := datadir.New(filepath.Dir(chainData))

	agg, err := libstate.NewAggregator2(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return nil, err
	}

	err = agg.OpenFolder()
	if err != nil {
		return nil, err
	}

	// Create a HistoryReaderV3 which implements StateReader
	stateReader := state.NewHistoryReaderV3()
	tdb, err := temporal.New(db, agg)
	if err != nil {
		return nil, err
	}

	tx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return nil, err
	}
	a, err := hex.DecodeString("8bb3cf2118e5031f9f9663199dda380055c989f64f4746ee5cc2f654029d6e5f")
	if err != nil {
		return nil, fmt.Errorf("failed to find transaction: %w", err)
	}
	txHash := libcommon.BytesToHash(a)
	blockNumber, txNum, err := rawdb.ReadTxLookupEntry(tx, txHash)
	if err != nil {
		return nil, fmt.Errorf("failed to find transaction: %w", err)
	}
	if blockNumber == nil {
		return nil, fmt.Errorf("transaction %s not found", txHash.Hex())
	}

	stateReader.SetTx(tx)
	stateReader.SetTxNum((*txNum) - 1)

	// Get the latest block number and set transaction to end of that block
	/*
		latestBlock := rawdb.ReadCurrentHeader(tx)
			if latestBlock != nil {
				fmt.Println("LATESTS BLOCK: ", latestBlock.Number.Uint64())
				// Set to the transaction number at the end of the latest block
				stateReader.SetTxNum(latestBlock.Number.Uint64() * 1000000) // rough approximation
			} else {
				fmt.Println("Latests header is null ... ")
				stateReader.SetTxNum(agg.EndTxNumMinimax())
				latestBlock := rawdb.ReadCurrentHeader(tx)
				fmt.Println("latests block", latestBlock)

			}

	// Create IntraBlockState using the proper StateReader
	stateDB := state.New(stateReader)

	return stateDB, nil
}
*/

/*

// ReplayTransaction finds a transaction and sets up for replay (simplified to avoid dependency issues)
func ReplayTransaction(chainData string, txHash libcommon.Hash, customTracer *StateTracer) error {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	dirs := datadir.New(filepath.Dir(chainData))

	agg, err := libstate.NewAggregator2(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return err
	}

	err = agg.OpenFolder()
	if err != nil {
		return err
	}

	tdb := temporal.New(db, agg)
	tx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Find the transaction in the database
	blockNumber, _, err := rawdb.ReadTxLookupEntry(tx, txHash)
	if err != nil {
		return fmt.Errorf("failed to find transaction: %w", err)
	}
	if blockNumber == nil {
		return fmt.Errorf("transaction %s not found", txHash.Hex())
	}

	fmt.Printf("✅ Found transaction %s in block: %d\n", txHash.Hex(), *blockNumber)
	fmt.Printf("✅ Custom tracer ready: %T\n", customTracer)
	fmt.Printf("✅ Database and state setup complete\n")

	fmt.Printf("\n🎯 Your StateTracer is ready to capture:\n")
	fmt.Printf("   - CaptureTxStart/End - transaction lifecycle\n")
	fmt.Printf("   - CaptureStart/End - call frame lifecycle\n")
	fmt.Printf("   - CaptureState - EVERY opcode execution\n")
	fmt.Printf("   - CaptureFault - errors and reverts\n")

	fmt.Printf("\n📝 To complete transaction replay:\n")
	fmt.Printf("   1. Your tracer implements vm.EVMLogger interface ✅\n")
	fmt.Printf("   2. Use erigon's transactions.TraceTx() with your tracer\n")
	fmt.Printf("   3. Your CaptureState() will get called for each opcode\n")
	fmt.Printf("   4. Access captured data with GetInstructions()\n")

	fmt.Printf("\n🚀 Ready for transpilation hooks in CaptureState()!\n")

	return nil
}
*/
// SimpleReplayTransaction - replays a single transaction using otterscan approach
/*
func SimpleReplayTransaction(chainData string, txHash libcommon.Hash, tracer *StateTracer) error {
	logger := log.New()
	fmt.Println("Trying to open db")
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	dirs := datadir.New(filepath.Dir(chainData))

	fmt.Println("Trying to open Aggregator")
	agg, err := libstate.NewAggregator2(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return err
	}

	err = agg.OpenFolder()
	if err != nil {
		return err
	}

	fmt.Println("Trying to open temporal")
	tdb, err := temporal.New(db, agg)
	if err != nil {
		return nil, err
	}

	tx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Find the transaction in the database
	blockNumber, txNum, err := rawdb.ReadTxLookupEntry(tx, txHash)
	if err != nil {
		return fmt.Errorf("failed to find transaction: %w", err)
	}
	if blockNumber == nil {
		return fmt.Errorf("transaction %s not found", txHash.Hex())
	}

	fmt.Printf("✅ Found transaction %s in block: %d\n", txHash.Hex(), *blockNumber)

	// Read the block header to get block data
	header := rawdb.ReadHeaderByNumber(tx, *blockNumber)
	if header == nil {
		return fmt.Errorf("block header %d not found", *blockNumber)
	}

	// Read the block body to get transactions
	body, err := rawdb.ReadBodyWithTransactions(tx, header.Hash(), *blockNumber)
	if err != nil {
		return fmt.Errorf("failed to read block body: %w", err)
	}
	if body == nil {
		return fmt.Errorf("block body %d not found", *blockNumber)
	}

	// Find the actual transaction in the block
	var actualTx types.Transaction
	var txIndex int
	for i, blockTx := range body.Transactions {
		if blockTx.Hash() == txHash {
			actualTx = blockTx
			txIndex = i
			break
		}
	}
	if actualTx == nil {
		return fmt.Errorf("transaction %s not found in block %d", txHash.Hex(), *blockNumber)
	}

	fmt.Printf("✅ Loaded actual transaction at index %d\n", txIndex)

	// Get chain config for proper sender recovery
	chainConfig, err := rawdb.ReadChainConfig(tx, header.Hash())
	if chainConfig == nil {
		chainConfig = params.MainnetChainConfig // fallback to mainnet
	}

	// Create signer for sender recovery
	signer := types.MakeSigner(chainConfig, header.Number.Uint64(), header.Time)
	sender, err := signer.Sender(actualTx)
	if err != nil {
		return fmt.Errorf("could not recover sender: %w", err)
	}

	fmt.Printf("   From: %s\n", sender.Hex())
	if actualTx.GetTo() != nil {
		fmt.Printf("   To: %s\n", actualTx.GetTo().Hex())
	} else {
		fmt.Printf("   To: <contract creation>\n")
	}
	fmt.Printf("   Value: %s\n", actualTx.GetValue().String())
	fmt.Printf("   Gas: %d\n", actualTx.GetGas())
	fmt.Printf("   Data length: %d bytes\n", len(actualTx.GetData()))

	// Create state DB from the temporal database
	stateReader := state.NewHistoryReaderV3()
	stateReader.SetTx(tx)
	stateReader.SetTxNum((*txNum) - 1) // rough approximation
	stateDB := state.New(stateReader)

	// Create block context from real block data
	var baseFee *uint256.Int
	if header.BaseFee != nil {
		baseFee, _ = uint256.FromBig(header.BaseFee)
	}

	// Calculate blob base fee for Cancun+ blocks
	var blobBaseFee *uint256.Int
	if header.ExcessBlobGas != nil {
		var err error
		blobBaseFee, err = misc.GetBlobGasPrice(chainConfig, *header.ExcessBlobGas, header.Time)
		if err != nil {
			return fmt.Errorf("failed to calculate blob gas price: %w", err)
		}
	}

	blockCtx := evmtypes.BlockContext{
		Coinbase:    header.Coinbase,
		BlockNumber: header.Number.Uint64(),
		Time:        header.Time,
		Difficulty:  header.Difficulty,
		GasLimit:    header.GasLimit,
		BaseFee:     baseFee,
		BlobBaseFee: blobBaseFee, // This was missing!
		GetHash: func(n uint64) libcommon.Hash {
			if h := rawdb.ReadHeaderByNumber(tx, n); h != nil {
				return h.Hash()
			}
			return libcommon.Hash{}
		},
		//	GetHash:     core.GetHash,
		CanTransfer: core.CanTransfer,
		Transfer:    consensus.Transfer,
	}

	// Create transaction context from real transaction data
	txCtx := evmtypes.TxContext{
		GasPrice: uint256.NewInt(actualTx.GetPrice().Uint64()),
		Origin:   sender,
	}

	tracerHooks := tracer.Hooks()
	if tracerHooks == nil {
		return fmt.Errorf("tracer hooks are nil")
	}

	// Create VM config with your tracer
	vmConfig := vm.Config{
		Tracer: tracer,
		Debug:  true,
	}

	fmt.Printf("🔧 VM Config created - Debug: %v, Tracer: %T\n", vmConfig.Debug, vmConfig.Tracer)

	fmt.Printf("🚀 Creating real EVM with actual transaction data...\n")

	// Create the EVM exactly as you specified - try using AllProtocolChanges like SimpleTracer
	evm := vm.NewEVM(blockCtx, txCtx, stateDB, params.AllProtocolChanges, vmConfig)
	fmt.Println(evm.Context)
	fmt.Println(evm.IntraBlockState())
	interpreter := vm.NewEVMInterpreter(evm, evm.Config())
	tracer.setJumpTable(interpreter.JT)

	fmt.Printf("✅ EVM and interpreter created successfully!\n")
	fmt.Printf("✅ Jump table set on tracer\n")

	// *** EXECUTION STEP - This is what was missing ***
	// Convert transaction to message - use chainConfig directly for Rules
	rules := chainConfig.Rules(header.Number.Uint64(), header.Time)
	msg, err := actualTx.AsMessage(*signer, header.BaseFee, rules)
	if err != nil {
		return fmt.Errorf("failed to convert tx to message: %w", err)
	}

	// Set transaction context for state - only txIndex parameter
	stateDB.SetTxContext(txIndex)

	// Set tracer hooks on state - tracer must implement tracing.Hooks interface
	if tracerHooks := tracer.Hooks(); tracerHooks != nil {
		stateDB.SetHooks(tracerHooks)
	} else {
		fmt.Println(("NO TRACES"))
	}

	// Create gas pool
	gasPool := new(core.GasPool).AddGas(actualTx.GetGas()).AddBlobGas(actualTx.GetBlobGas())

	// Set tracer hooks on state
	if tracerHooks := tracer.Hooks(); tracerHooks != nil {
		stateDB.SetHooks(tracerHooks)

		// Call OnTxStart before execution
		if tracerHooks.OnTxStart != nil {
			//	tracerHooks.OnTxStart(context, actualTx, sender)
		}
	} else {
		fmt.Println("NO TRACES")
	}

	fmt.Println(gasPool)
	fmt.Println(msg)

	// Execute the transaction directly via EVM instead of ApplyMessage
	fmt.Printf("🎯 About to call EVM directly with Debug=%v\n", evm.Config().Debug)
	fmt.Printf("🎯 EVM tracer type: %T\n", evm.Config().Tracer)

	caller := vm.AccountRef(sender)
	var ret []byte
	var leftOverGas uint64
	var vmerr error

	if msg.To() == nil {
		// Contract creation
		fmt.Printf("📝 Creating contract with %d bytes of code\n", len(msg.Data()))
		ret, _, leftOverGas, vmerr = evm.Create(caller, msg.Data(), msg.Gas(), msg.Value(), false)
	} else {
		// Contract call - check if target has code and run via interpreter directly
		//		targetCode, err := stateDB.GetCode(*msg.To())
		fmt.Println("error", err)
		targetCode, err := hex.DecodeString("6080604052600436106101e75760003560e01c80639871efa411610102578063e0af361611610095578063f3dced3c11610064578063f3dced3c146105a8578063f3e144b6146105c8578063f851a440146105e8578063fa461e331461060857600080fd5b8063e0af361614610526578063e99bfa9514610548578063f1489b9f1461055b578063f2fde38b1461058857600080fd5b8063d13a35e6116100d1578063d13a35e6146104ca578063d1b260d4146104ea578063d3507df5146104fd578063d8837daf1461051357600080fd5b80639871efa41461046c5780639a09b2851461047f578063b80c2f091461049f578063ca68d8f6146104b257600080fd5b8063715018a61161017a5780638575654f116101495780638575654f146103e3578063869c6b4b146103f65780638da5cb5b14610436578063918f86741461045457600080fd5b8063715018a61461037157806373679b6b14610386578063779e45fc146103ae5780638129fc1c146103ce57600080fd5b806327f9fa1e116101b657806327f9fa1e1461029d57806354fd4d50146102eb578063591b3d08146103365780636aa476451461034957600080fd5b806301617fab1461023e57806303b87e5f1461025157806308298b5a146102775780630d5f0e3b1461028a57600080fd5b36610239573233036102375760405162461bcd60e51b81526020600482015260146024820152731155120819195c1bdcda5d081c995a9958dd195960621b60448201526064015b60405180910390fd5b005b600080fd5b61023761024c3660046144c4565b610628565b61026461025f36600461456e565b610a88565b6040519081526020015b60405180910390f35b61026461028536600461463a565b610b4c565b6102646102983660046146ac565b610b8e565b3480156102a957600080fd5b506102d36102b836600461470c565b60b4602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161026e565b3480156102f757600080fd5b5061032960405180604001604052806012815260200171076312e302e312d6265666f72655f73746f760741b81525081565b60405161026e9190614779565b610264610344366004614d63565b610bce565b34801561035557600080fd5b506102d37370cbb871e8f30fc8ce23609e9e0ea87b6b222f5881565b34801561037d57600080fd5b50610237610e47565b34801561039257600080fd5b506102d3735703b683c7f928b721ca95da988d73a3299d475781565b3480156103ba57600080fd5b506102376103c9366004614e25565b610e5b565b3480156103da57600080fd5b50610237610f12565b6102646103f13660046146ac565b61102c565b34801561040257600080fd5b5061042661041136600461470c565b60996020526000908152604090205460ff1681565b604051901515815260200161026e565b34801561044257600080fd5b506033546001600160a01b03166102d3565b34801561046057600080fd5b50610264633b9aca0081565b61026461047a3660046146ac565b61112f565b34801561048b57600080fd5b5061023761049a36600461470c565b611166565b6102646104ad366004614e5e565b611208565b3480156104be57600080fd5b506102646301c9c38081565b3480156104d657600080fd5b506098546102d3906001600160a01b031681565b6102646104f8366004614e5e565b611286565b34801561050957600080fd5b5061026460b65481565b6102646105213660046146ac565b61140d565b34801561053257600080fd5b506102d360008051602061549883398151915281565b610264610556366004614f14565b61150c565b34801561056757600080fd5b50610264610576366004614fc4565b60b56020526000908152604090205481565b34801561059457600080fd5b506102376105a336600461470c565b61151c565b3480156105b457600080fd5b506097546102d3906001600160a01b031681565b3480156105d457600080fd5b506102646105e336600461501e565b611592565b3480156105f457600080fd5b5060ad546102d3906001600160a01b031681565b34801561061457600080fd5b506102376106233660046150a8565b6115e0565b600160ff1b81166001600160801b0382168061067b5760405162461bcd60e51b81526020600482015260126024820152710616d6f756e74206d757374206265203e20360741b604482015260640161022e565b600061068561182f565b90506000836106a85773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6106b8565b6000805160206154988339815191525b90506000806106d384843333896001600160801b031661195c565b9150915085156108a55760405163052f523360e11b81526000805160206154988339815191526004820152336024820152735703b683c7f928b721ca95da988d73a3299d475760448201526001600160801b03861660648201527370cbb871e8f30fc8ce23609e9e0ea87b6b222f5890630a5ea46690608401600060405180830381600087803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b81526001600160801b0388166004820152735703b683c7f928b721ca95da988d73a3299d47579250632e1a7d4d9150602401600060405180830381600087803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050506001600160a01b03821630146108a0576000826001600160a01b03164760405160006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b505090508061089e5760405162461bcd60e51b815260206004820152601c60248201527f7472616e73666572206e617469766520746f6b656e206661696c656400000000604482015260640161022e565b505b61099a565b83516108fc57846001600160801b031634146108fc5760405162461bcd60e51b81526020600482015260166024820152751d985b1d59481b9bdd08195c5d585b08185b5bdd5b9d60521b604482015260640161022e565b6000805160206154988339815191526001600160a01b031663d0e30db0866001600160801b03166040518263ffffffff1660e01b81526004016000604051808303818588803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b505050506001600160a01b0383163014905061099a5761099a60008051602061549883398151915283876001600160801b0316611caa565b60006109a7853384611cda565b90506000805160206154d8833981519152896040516109c891815260200190565b60405180910390a16000805160206154b8833981519152876109fe5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610a0e565b6000805160206154988339815191525b88610a2757600080516020615498833981519152610a3d565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516001600160a01b03938416815292909116602083015232908201526001600160801b03881660608201819052608082015260a00160405180910390a1505050505050505050565b6000876080013542811015610aaf5760405162461bcd60e51b815260040161022e906150fa565b610ab761207e565b6040518b81526000805160206154d88339815191529060200160405180910390a1610b3233808c610aed368e90038e018e615122565b8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b2d92508d91508e905061513e565b6120d7565b9150610b3e6001606555565b509998505050505050505050565b60405160a087901c81526000906000805160206154d88339815191529060200160405180910390a1610b8387878733888888612199565b979650505050505050565b60405160a086901c81526000906000805160206154d88339815191529060200160405180910390a1610bc4338787878787612231565b9695505050505050565b6000866080015142811015610bf55760405162461bcd60e51b815260040161022e906150fa565b610bfd61207e565b87516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed198101610c635760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21039b7bab931b2903a37b5b2b760611b604482015260640161022e565b6001600160a01b038416610cb25760405162461bcd60e51b8152602060048201526016602482015275726566756e64546f206973206164647265737328302960501b604482015260640161022e565b6001600160a01b038516610cfb5760405162461bcd60e51b815260206004820152601060248201526f746f206973206164647265737328302960801b604482015260640161022e565b6000896040015111610d465760405162461bcd60e51b8152602060048201526014602482015273066726f6d546f6b656e416d6f756e7420697320360641b604482015260640161022e565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db1919061514b565b905060005b8951811015610e18578a60400151828b8381518110610dd757610dd7615164565b6020026020010151610de99190615190565b610df391906151a7565b8a8281518110610e0557610e05615164565b6020908102919091010152600101610db6565b5060408a01819052610e2e8a8a8a30898b6123b9565b93505050610e3c6001606555565b509695505050505050565b610e4f6126f0565b610e59600061274a565b565b60ad546001600160a01b0316331480610e7e57506033546001600160a01b031633145b610eaf5760405162461bcd60e51b81526020600482015260026024820152616e6160f01b604482015260640161022e565b6001600160a01b038216600081815260996020908152604091829020805460ff19168515159081179091558251938452908301527fede97de789011d2becb9fba8441864c3b17f4a20f7ebf0a77e93f30adc30e207910160405180910390a15050565b600054610100900460ff1615808015610f325750600054600160ff909116105b80610f4c5750303b158015610f4c575060005460ff166001145b610faf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161022e565b6000805460ff191660011790558015610fd2576000805461ff0019166101001790555b610fda61279c565b610fe26127cb565b8015611029576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b3360009081526099602052604081205460ff1615156001146110605760405162461bcd60e51b815260040161022e906151c9565b60405160a087901c81526000805160206154d88339815191529060200160405180910390a1600080336001600160a01b031663534015b36040518163ffffffff1660e01b81526004016040805180830381865afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e991906151f0565b90925090506001600160a01b0381166111145760405162461bcd60e51b815260040161022e9061521f565b61112388888885858a8a612199565b98975050505050505050565b60405160a086901c81526000906000805160206154d88339815191529060200160405180910390a1610bc486868633338888612199565b60ad546001600160a01b031633148061118957506033546001600160a01b031633145b6111ba5760405162461bcd60e51b81526020600482015260026024820152616e6160f01b604482015260640161022e565b60ad80546001600160a01b0319166001600160a01b0383169081179091556040519081527f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c90602001611020565b600087608001354281101561122f5760405162461bcd60e51b815260040161022e906150fa565b61123761207e565b6040518a81526000805160206154d88339815191529060200160405180910390a161126d338080610aed368e90038e018e615122565b91506112796001606555565b5098975050505050505050565b60008760800135428110156112ad5760405162461bcd60e51b815260040161022e906150fa565b6112b561207e565b3360009081526099602052604090205460ff1615156001146112e95760405162461bcd60e51b815260040161022e906151c9565b6040518a81526000805160206154d88339815191529060200160405180910390a1600080336001600160a01b031663534015b36040518163ffffffff1660e01b81526004016040805180830381865afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136e91906151f0565b90925090506001600160a01b0381166113995760405162461bcd60e51b815260040161022e9061521f565b6113ff8283838e8036038101906113b09190615122565b8e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d90610b2d919061513e565b935050506112796001606555565b3360009081526099602052604081205460ff1615156001146114415760405162461bcd60e51b815260040161022e906151c9565b60405160a087901c81526000805160206154d88339815191529060200160405180910390a1600080336001600160a01b031663534015b36040518163ffffffff1660e01b81526004016040805180830381865afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca91906151f0565b90925090506001600160a01b0381166114f55760405162461bcd60e51b815260040161022e9061521f565b61112382826001600160a01b031689898989612231565b6000610bc4868686868687610bce565b6115246126f0565b6001600160a01b0381166115895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022e565b6110298161274a565b60405160a089901c81526000906000805160206154d88339815191529060200160405180910390a16115c58884846127fa565b6115d3338a89898989612231565b9998505050505050505050565b611681565b3d6000803e3d6000fd5b67a9059cbb70a0823160c01b815230816008015260206000602483600401855afa61161c5761161c6115e5565b60005180156116475760a4356004830152602482018190526116476020600060448582885af161164c565b505050565b80611659576116596115e5565b600160005114601f3d11163d15178061167d57633c9fd93960e21b60005260046000fd5b5050565b604051601581017306ff0b40e9091053eee51fa1d482ce5d852f523360611b825260206000600484335afa6116b8576116b86115e5565b6020806004808501335afa6116cf576116cf6115e5565b60206040600460088501335afa6116e8576116e86115e5565b600080600088136001811461170457602051925087915061170d565b60005192508891505b507fff1f98431c8ad98523631ae4a59f267346ea31f98400000000000000000000008452606060002083527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460208401526001600160a01b036055852016925033831461178557635960139160e11b60005260046000fd5b60843592507306ff0b40e9091053eee51fa1d482ce5d852f523360611b8452308314600181146117f7578260148601528360348601523360548601528160748601526117f26020600060846010890160007370cbb871e8f30fc8ce23609e9e0ea87b6b222f585af161164c565b611824565b33601086015281603086015261181a602060006044600c89016000885af161164c565b61182483866115ef565b505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260405160e081016040525060203603356001600160d01b031981166522220afc2bbb60d01b8114651111057e155560d11b821417651111057e155560d11b8214651e51057e155560d11b83141784526522220afc2bbb60d01b8214653ca20afc2bbb60d01b831417846020015265ffffffffffff60a01b831660a01c84604001526001600160a01b03831684606001526001600160a01b036040360335168460800152600181146001811461192a5760008560a0015260008560c00152611955565b6060360335935065ffffffffffff60a01b841660a01c8560a001526001600160a01b0384168560c001525b5050505090565b6000808660200151156119815730611978886080015130612960565b91509150611ca0565b865161199257508290506000611ca0565b6119b3565b62461bcd60e51b600052600160e51b6020528060405250806000fd5b604087015160a08801518082016301c9c3808111156119f4576119f4605f7c1b6572726f7220636f6d6d697373696f6e2072617465206c696d697400611997565b60808a015189811473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82148b151617611a4357611a43605b7c17746f6b656e20616e6420737263206e6f74206d617463680000000000611997565b60608b015182633b9aca000385890204945073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee821460018114611aee576040516084810160405263052f523360e11b81528360048201528b602482015282604482015286606482015260008060848360007370cbb871e8f30fc8ce23609e9e0ea87b6b222f585af1905080611ae857611ae860577304d8db185a5b481d1bdad95b9cc819985a5b1959604a1b611997565b50611b27565b60008060008089865af180611b2557611b25605f7c1b636f6d6d697373696f6e2077697468206574686572206572726f7200611997565b505b50604051606081016040528281528560208201528160408201527f0d3b1268ca3dbb6d3d8a0ea35f44f8f9d58cf578d732680b71b6904fb2733e0d606082a150508215611c945760c08b0151935081633b9aca00038388020473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee821460018114611c19576040516084810160405263052f523360e11b81528360048201528b602482015286604482015282606482015260008060848360007370cbb871e8f30fc8ce23609e9e0ea87b6b222f585af1905080611c1357611c1360577304d8db185a5b481d1bdad95b9cc819985a5b1959604a1b611997565b50611c52565b600080600080858a5af180611c5057611c50605f7c1b636f6d6d697373696f6e2077697468206574686572206572726f7200611997565b505b50604051606081016040528281528160208201528560408201527f0d3b1268ca3dbb6d3d8a0ea35f44f8f9d58cf578d732680b71b6904fb2733e0d606082a150505b50505050836000915091505b9550959350505050565b611cbd8363a9059cbb60e01b84846129e6565b6116475760405163fb7f507960e01b815260040160405180910390fd5b60008360200151611ced57506000612077565b604084015160a08501516301c9c3808183011115611d2d57611d2d605f7c1b6572726f7220636f6d6d697373696f6e2072617465206c696d697400611997565b608086015160608701516040516060810160405273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee831460018114611f3457604051604c81016040526fa9059cbba9059cbba9059cbb70a0823160801b8152306010820152602060006024600c8401885afa80611dbb57611dbb6058740519d95d0818985b185b98d953d98819985a5b195960421b611997565b6000518a811015611ddf57611ddf604d6a029cdd588819985a5b195960921b611997565b8a81039050633b9aca0089820204995085600c84015289602c84015260008060446008860160008b5af1915081611e3857611e38605f7c1b7472616e7366657220746f6b656e2072656665726572206661696c00611997565b868552896020860152856040860152600080516020615478833981519152606086a18715611edd5760c08d0151633b9aca0089830204808c019b5081600886015280602886015260008060446004880160008d5af1935083611ebc57611ebc605f7c1b7472616e7366657220746f6b656e2072656665726572206661696c00611997565b88875260208701526040860152600080516020615478833981519152606086a15b6001600160a01b038c1660048401528990036024830152600080604484828a5af1905080611f2d57611f2d60607c1c7472616e7366657220746f6b656e207265636569766572206661696c611997565b5050612070565b87471015611f5557611f55604d6a029cdd588819985a5b195960921b611997565b874703633b9aca008782020497506000806000808b885af180611f9a57611f9a605d7c197472616e73666572206574682072656665726572206661696c000000611997565b858452886020850152846040850152600080516020615478833981519152606085a1861561202c5760c08c0151633b9aca0083890204998a0199600080808084865af18061200a5761200a605d7c197472616e73666572206574682072656665726572206661696c000000611997565b5087865260208601526040850152600080516020615478833981519152606085a15b6000806000808c86038f60601b60601c5af190508061206d5761206d605e7c1a7472616e7366657220657468207265636569766572206661696c0000611997565b50505b5050505050505b9392505050565b6002606554036120d05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161022e565b6002606555565b60006001600160a01b03851661211d5760405162461bcd60e51b815260206004820152600b60248201526a6e6f74206164647228302960a81b604482015260640161022e565b600061212761182f565b90506000806121508361214489600001516001600160a01b031690565b8c8b8b6040015161195c565b9092509050896000612166898989858f896123b9565b90506000612175868c86611cda565b90506121818183615247565b9d9c50505050505050505050505050565b6001606555565b60006001600160a01b0384166121df5760405162461bcd60e51b815260206004820152600b60248201526a6e6f74206164647228302960a81b604482015260640161022e565b60006121e961182f565b9050600080612204836001600160a01b038d168a8a8e61195c565b9150915060006122226001600160a01b038d168c8c8a8a8e89612a3a565b90506000612175858a85611cda565b60008061223c61182f565b905060003415612261575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612386565b60006001600160a01b038686600081811061227e5761227e615164565b905060200201351690506000600160ff1b878760008181106122a2576122a2615164565b90506020020135166000149050801561231e57816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612317919061525a565b9250612383565b816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612380919061525a565b92505b50505b60008061239684848d8d8d61195c565b9150915060006123aa8c848c8c8c8c613261565b90506000612175868d85611cda565b6040860151600090879061241a5760405162461bcd60e51b815260206004820152602260248201527f526f7574653a2066726f6d546f6b656e416d6f756e74206d757374206265203e604482015261020360f41b606482015260840161022e565b805160208201516001600160a01b0391821691612438911685613784565b925061244381613818565b156124b2576000805160206154988339815191526001600160a01b031663d0e30db083604001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561249557600080fd5b505af11580156124a9573d6000803e3d6000fd5b50505050503095505b6000805b89518110156124ee578981815181106124d1576124d1615164565b6020026020010151826124e49190615277565b91506001016124b6565b5082604001518111156125615760405162461bcd60e51b815260206004820152603560248201527f526f7574653a206e756d626572206f6620626174636865732073686f756c64206044820152741899480f0f48199c9bdb551bdad95b905b5bdd5b9d605a1b606482015260840161022e565b5086518851146125a55760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161022e565b60005b875181101561260e576126068787876125cd87602001516001600160a01b0316613818565b8d86815181106125df576125df615164565b60200260200101518d87815181106125f9576125f9615164565b602002602001015161383a565b6001016125a8565b5061261d8260200151856139b2565b60208201518390612637906001600160a01b031686613784565b6126419190615247565b925081606001518310156126905760405162461bcd60e51b8152602060048201526016602482015275135a5b881c995d1d5c9b881b9bdd081c995858da195960521b604482015260640161022e565b60208083015160408085015181516001600160a01b0380871682529093169383019390935232908201526060810191909152608081018490526000805160206154b88339815191529060a00160405180910390a150509695505050505050565b6033546001600160a01b03163314610e595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166127c35760405162461bcd60e51b815260040161022e9061528a565b610e59613c7a565b600054610100900460ff166127f25760405162461bcd60e51b815260040161022e9061528a565b610e59613caa565b8015611647576000606060e083900361289b576040516001600160a01b038616906128349063d505accf60e01b90879087906020016152d5565b60408051601f198184030181529082905261284e916152f9565b6000604051808303816000865af19150503d806000811461288b576040519150601f19603f3d011682016040523d82523d6000602084013e612890565b606091505b50909250905061290a565b6101008390036128cc576040516001600160a01b03861690612834906323f2ebc360e21b90879087906020016152d5565b60405162461bcd60e51b81526020600482015260136024820152720aee4dedcce40e0cae4dad2e840d8cadccee8d606b1b604482015260640161022e565b8161295957612940816040518060400160405280600f81526020016e02832b936b4ba103330b4b632b21d1608d1b815250613cd1565b60405162461bcd60e51b815260040161022e9190614779565b5050505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8314600181146129da57604051602481016040526370a0823160e01b815283600482015260206000602483885afa9050806129cf576129cf6058740519d95d0818985b185b98d953d98819985a5b195960421b611997565b5060005191506129df565b823191505b5092915050565b60006040518481528360048201528260248201526020600060448360008a5af19150508015612a32573d8015612a2857600160005114601f3d11169150612a30565b6000863b1191505b505b949350505050565b6000612c6a565b828152600060206000600484600401865afa612a7657612a766054700419d95d081d1bdad95b8819985a5b195960621b611997565b505060005192915050565b6770a082310dfe168160c01b815260008060206000600485600401875afa612ac457612ac4605672049d1bdad95b8c0818d85b1b0819985a5b195960521b611997565b600051915083836004015260206000602485855afa612b0557612b0560597c1562616c616e63654f662063616c6c206661696c656400000000000000611997565b60005190509250929050565b6770a08231d21220a760c01b815260008060206000600485600401875afa612ac457612ac4605672049d1bdad95b8c4818d85b1b0819985a5b195960521b611997565b668b0367c240bc6b60c21b8152600060406000600484600401875afa612b9c57612b9c60587c1472657365727665732063616c6c206661696c65640000000000000000611997565b600051602051868015612bc8578915612bc057612bb98786612b11565b8390039650505b909190612bdf565b8815612bdf57612bd88786612a81565b8490039650505b50668b0367c240bc6b60c21b8452898502633b9aca009290920282019102049050848015612c195781600484015260006024840152612c27565b600060048401528160248401525b50886044830152608060648301526000608483015260008060a4846000885af161112357611123605470041cddd85c0818d85b1b0819985a5b195960621b611997565b846020850281018580612c9157612c91604e6b0b656d70747920706f6f6c7360901b611997565b5060405182358b1560018114612d3b573415612cc757612cc760557111696e76616c6964206d73672e76616c756560581b611997565b63052f523360e11b83528c60048401528760248401526001600160a01b03821660448401528b606484015260008060848560007370cbb871e8f30fc8ce23609e9e0ea87b6b222f585af1612d3657612d366056720498db185a5b481d1bdad95b8819985a5b195960521b611997565b612e08565b60018c341003612d6557612d6560557111696e76616c6964206d73672e76616c756560581b611997565b670a9059cbbd0e30db60c41b835260008060048086018f6000805160206154988339815191525af1612db257612db26056720499195c1bdcda5d081155120819985a5b195960521b611997565b6001600160a01b03821683600401528b83602401526020600060448560006000805160206154988339815191525af1612e0857612e08605874051d1c985b9cd9995c8815d155120819985a5b195960421b611997565b508a9450602084015b83811015612e67578035612e5b6001600160a01b03821663ffffffff60a01b851660a01c600160fd1b8616600160fc1b8716600160ff1b88166001600160a01b0389168d8b612b54565b96509150602001612e11565b5060009350600160fe1b81168015612fb55760009450612eb43063ffffffff60a01b841660a01c600160fd1b8516600160fc1b8616600160ff1b87166001600160a01b0388168c8a612b54565b9550672e1a7d4da9059cbb60c01b8352735703b683c7f928b721ca95da988d73a3299d475760088401528560288401526020600060448560040160006000805160206154988339815191525af1612f2857612f28605874051d1c985b9cd9995c8815d155120819985a5b195960421b611997565b856004840152602060006024856000735703b683c7f928b721ca95da988d73a3299d47575af1612f7a57612f7a60577c13776974686472617720455448206661696c6564000000000000000000611997565b600080600080898b5af1612fb057612fb060577c137472616e7366657220455448206661696c6564000000000000000000611997565b6131f3565b60009350600160ff1b8216801561306757600160fc1b831615613062576770a082310dfe168160c01b8452602060006004866004016001600160a01b0387165afa61301b5761301b605672049d1bdad95b8c0818d85b1b0819985a5b195960521b611997565b600051955087846004015260206000602486895afa61305c5761305c60567c15746f6b656e302062616c616e6365206661696c656400000000000000611997565b60005194505b613103565b600160fd1b831615613103576770a08231d21220a760c01b8452602060006004866004016001600160a01b0387165afa6130bc576130bc605672049d1bdad95b8c4818d85b1b0819985a5b195960521b611997565b600051955087846004015260206000602486895afa6130fd576130fd60597c15746f6b656e312062616c616e6365206661696c656400000000000000611997565b60005194505b5061313b8763ffffffff60a01b841660a01c600160fd1b8516600160fc1b8616600160ff1b87166001600160a01b0388168c8a612b54565b955084600010600181146131a457600160ff1b8316801561317c576131756770a082310dfe168160c01b6001600160a01b03861687612a41565b965061319e565b61319b6770a08231d21220a760c01b6001600160a01b03861687612a41565b96505b506131f1565b6770a082310dfe168160c01b845287846004015260206000602486895afa6131e9576131e96058740519d95d0818985b185b98d953d98819985a5b195960421b611997565b846000510396505b505b50508884101561322557613225605a7c164d696e2072657475726e206e6f742072656163686564000000000000611997565b8a81528260208201523260408201528960608201528360808201526000805160206154b883398151915260a082a1505050979650505050505050565b6000613685565b6000856001600160ff1b03101561328a57630b3f79fd60e41b60005260046000fd5b604051600160ff1b8616156001600160a01b038716816001811461331e57630251596160e31b845260048401868152600060208201528a604082015273fffd8963efd1fc6a506488495d951d5263988d25606082015260a06080820152604060a08201528760c08201528860e082015250600080610104866000865af1806133125760206000fd5b5060206000803e613381565b630251596160e31b845260048401868152600160208201528a60408201526401000276a4606082015260a06080820152604060a08201528760c08201528860e082015250600080610104866000865af1806133795760206000fd5b5060208060003e5b505050506000519050600160ff1b8110156133a7576322323ba760e21b60005260046000fd5b1960010195945050505050565b6001813410036133cf57631841b4e160e01b60005260046000fd5b600080600080846000805160206154988339815191525af18061167d5761167d60577c1357455448206465706f736974206661696c6564000000000000000000611997565b60405160048101672e1a7d4da9059cbb60c01b8252735703b683c7f928b721ca95da988d73a3299d4757600482015283602482015260008060448360006000805160206154988339815191525af19050806134915761349160587c147472616e736665722077657468206661696c65640000000000000000611997565b8360048301526000806024846000735703b683c7f928b721ca95da988d73a3299d47575af19050806134e5576134e560587c1477697468647261772077657468206661696c65640000000000000000611997565b60008060008087875af190508061351657613516605571045cd95b9908195d1a195c8819985a5b1959605a1b611997565b50505050565b60006040517306ff0b40e9091053eee51fa1d482ce5d852f523360611b8152600080600483865afa90508061356b5761356b6055710459d95d081d1bdad95b8c0819985a5b1959605a1b611997565b5060206000803e505060005190565b60006040517306ff0b40e9091053eee51fa1d482ce5d852f523360611b81526000806004808401865afa90508061356b5761356b6054710459d95d081d1bdad95b8c4819985a5b1959605a1b611997565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8034613617578235600160ff1b81161560018114613608576136018261357a565b9350613614565b6136118261351c565b93505b50505b8335600160fd1b16613654578335600160ff1b811615600181146136455761363e8261351c565b9250613651565b61364e8261357a565b92505b50505b604051826000528160205232604052856080526000805160206154b883398151915260a06000a16040525050505050565b82601f196020840282010183806136a7576333f3e07b60e11b60005260046000fd5b50886000341180156136c0576136bc896133b4565b309a505b5087606052825b828110156136ea576136dd898235848e30613268565b309b5098506020016136c7565b506000600160fd1b83351611806001811461370a5780156137295761373a565b6137188a8535858f30613268565b9550613724868c613414565b61373a565b6137378a8535858f8f613268565b95505b5050508583101561376d5761376d605a7c164d696e2072657475726e206e6f742072656163686564000000000000611997565b6137788382846135cb565b50509695505050505050565b600061378f83613818565b156137a557506001600160a01b03811631613812565b6040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa1580156137eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380f919061514b565b90505b92915050565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b600061386a8260008151811061385257613852615164565b6020026020010151608001516001600160a01b031690565b905060008060008451905060005b818110156139a55780156138b65761389b86828151811061385257613852615164565b94506138b06001600160a01b03861630613784565b9650309a505b306138c2600184615247565b821480156138ce575088155b156138da575088613972565b6138e5600184615247565b8210801561391b5750866138fa836001615277565b8151811061390a5761390a615164565b602002602001015160200151516001145b1561396d578661392c836001615277565b8151811061393c5761393c615164565b60200260200101516020015160008151811061395a5761395a615164565b6020026020010151905060019450613972565b600094505b6139998c8c838b8b878151811061398b5761398b615164565b602002602001015189613e34565b50839250600101613878565b5050505050505050505050565b6139c4826001600160a01b0316613818565b15613bec576040516370a0823160e01b8152306004820152600090600080516020615498833981519152906370a0823190602401602060405180830381865afa158015613a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a39919061514b565b90508015613b325760405163a9059cbb60e01b8152735703b683c7f928b721ca95da988d73a3299d47576004820152602481018290526000805160206154988339815191529063a9059cbb906044016020604051808303816000875af1158015613aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613acb9190615315565b50604051632e1a7d4d60e01b815260048101829052735703b683c7f928b721ca95da988d73a3299d475790632e1a7d4d90602401600060405180830381600087803b158015613b1957600080fd5b505af1158015613b2d573d6000803e3d6000fd5b505050505b6001600160a01b038216301461164757478015613516576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114613b96576040519150601f19603f3d011682016040523d82523d6000602084013e613b9b565b606091505b50509050806129595760405162461bcd60e51b815260206004820152601c60248201527f7472616e73666572206e617469766520746f6b656e206661696c656400000000604482015260640161022e565b6001600160a01b038116301461167d576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c67919061514b565b9050801561164757611647838383611caa565b600054610100900460ff16613ca15760405162461bcd60e51b815260040161022e9061528a565b610e593361274a565b600054610100900460ff166121925760405162461bcd60e51b815260040161022e9061528a565b60606004835110613e025760208301516001600160e01b0319811662461bcd60e51b148015613d0257506044845110155b15613da257602484810151808601820180519192909190613d24908490615277565b613d2e9190615277565b86511015613d765760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103932bb32b93a103932b0b9b7b760591b604482015260640161022e565b8481604051602001613d89929190615332565b6040516020818303038152906040529350505050613812565b6001600160e01b03198116634e487b7160e01b148015613dc3575083516024145b15613e0057602484015183613dd782613feb565b604051602001613de8929190615381565b60405160208183030381529060405292505050613812565b505b81613e0c84614013565b604051602001613e1d9291906153b6565b604051602081830303815290604052905092915050565b6000805b835151811015613fe157600084604001518281518110613e5a57613e5a615164565b602002602001015160001b9050600080600080613e8189608001516001600160a01b031690565b6001600160a01b0386169450600160ff1b8616935061ffff60a087901c1692509050613ead8288615277565b895151909750613ebf90600190615247565b8603613f2657612710871115613f265760405162461bcd60e51b815260206004820152602660248201527f746f74616c5765696768742063616e206e6f7420657863656564203130303030604482015265081b1a5b5a5d60d21b606482015260840161022e565b87613f815760008261271014613f5257612710613f43848d615190565b613f4d91906151a7565b613f54565b8a5b9050613f7f8e8b602001518981518110613f7057613f70615164565b602002602001015184846141fa565b505b5050613fcb8188600001518681518110613f9d57613f9d615164565b60200260200101518b858b606001518981518110613fbd57613fbd615164565b60200260200101518f61429a565b5050508080613fd990615407565b915050613e38565b5050505050505050565b60606138128260405160200161400391815260200190565b6040516020818303038152906040525b80516060906f181899199a1a9b1b9c1cb0b131b232b360811b9060009061403b906002615190565b614046906002615277565b6001600160401b0381111561405d5761405d61478c565b6040519080825280601f01601f191660200182016040528015614087576020820181803683370190505b509050600360fc1b816000815181106140a2576140a2615164565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106140d1576140d1615164565b60200101906001600160f81b031916908160001a90535060005b84518110156141f25782600486838151811061410957614109615164565b01602001516001600160f81b031916901c60f81c6010811061412d5761412d615164565b1a60f81b8261413d836002615190565b614148906002615277565b8151811061415857614158615164565b60200101906001600160f81b031916908160001a9053508285828151811061418257614182615164565b60209101015160f81c600f166010811061419e5761419e615164565b1a60f81b826141ae836002615190565b6141b9906003615277565b815181106141c9576141c9615164565b60200101906001600160f81b031916908160001a905350806141ea81615407565b9150506140eb565b509392505050565b306001600160a01b0385160361421a57614215828483611caa565b613516565b60405163052f523360e11b81526001600160a01b038084166004830152808616602483015284166044820152606481018290527370cbb871e8f30fc8ce23609e9e0ea87b6b222f5890630a5ea46690608401600060405180830381600087803b15801561428657600080fd5b505af1158015613fe1573d6000803e3d6000fd5b85156143b257600080866001600160a01b0316636f7929f260e01b8787876040516024016142ca93929190615420565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143186001600160a01b038616650f2882bf0b3360d21b615277565b604051602001614329929190615455565b60408051601f1981840301815290829052614343916152f9565b6000604051808303816000865af19150503d8060008114614380576040519150601f19603f3d011682016040523d82523d6000602084013e614385565b606091505b50915091508181906143aa5760405162461bcd60e51b815260040161022e9190614779565b5050506144bc565b600080866001600160a01b03166330e6ae3160e01b8787876040516024016143dc93929190615420565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261442a6001600160a01b038616650f2882bf0b3360d21b615277565b60405160200161443b929190615455565b60408051601f1981840301815290829052614455916152f9565b6000604051808303816000865af19150503d8060008114614492576040519150601f19603f3d011682016040523d82523d6000602084013e614497565b606091505b50915091508181906118245760405162461bcd60e51b815260040161022e9190614779565b505050505050565b600080604083850312156144d757600080fd5b50508035926020909101359150565b6001600160a01b038116811461102957600080fd5b8035614506816144e6565b919050565b600060a0828403121561451d57600080fd5b50919050565b60008083601f84011261453557600080fd5b5081356001600160401b0381111561454c57600080fd5b6020830191508360208260051b850101111561456757600080fd5b9250929050565b60008060008060008060008060006101408a8c03121561458d57600080fd5b8935985060208a013561459f816144e6565b97506145ae8b60408c0161450b565b965060e08a01356001600160401b03808211156145ca57600080fd5b6145d68d838e01614523565b90985096506101008c01359150808211156145f057600080fd5b6145fc8d838e01614523565b90965094506101208c013591508082111561461657600080fd5b506146238c828d01614523565b915080935050809150509295985092959850929598565b60008060008060008060a0878903121561465357600080fd5b8635955060208701359450604087013593506060870135614673816144e6565b925060808701356001600160401b0381111561468e57600080fd5b61469a89828a01614523565b979a9699509497509295939492505050565b6000806000806000608086880312156146c457600080fd5b85359450602086013593506040860135925060608601356001600160401b038111156146ef57600080fd5b6146fb88828901614523565b969995985093965092949392505050565b60006020828403121561471e57600080fd5b8135612077816144e6565b60005b8381101561474457818101518382015260200161472c565b50506000910152565b60008151808452614765816020860160208601614729565b601f01601f19169290920160200192915050565b602081526000612077602083018461474d565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156147c4576147c461478c565b60405290565b60405161014081016001600160401b03811182821017156147c4576147c461478c565b604051601f8201601f191681016001600160401b03811182821017156148155761481561478c565b604052919050565b600060a0828403121561482f57600080fd5b6148376147a2565b905081358152602082013561484b816144e6565b8060208301525060408201356040820152606082013560608201526080820135608082015292915050565b60006001600160401b0382111561488f5761488f61478c565b5060051b60200190565b600082601f8301126148aa57600080fd5b813560206148bf6148ba83614876565b6147ed565b82815260059290921b840181019181810190868411156148de57600080fd5b8286015b84811015610e3c57803583529183019183016148e2565b600082601f83011261490a57600080fd5b8135602061491a6148ba83614876565b82815260059290921b8401810191818101908684111561493957600080fd5b8286015b84811015610e3c578035614950816144e6565b835291830191830161493d565b600082601f83011261496e57600080fd5b81356001600160401b038111156149875761498761478c565b61499a601f8201601f19166020016147ed565b8181528460208386010111156149af57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126149dd57600080fd5b813560206149ed6148ba83614876565b82815260059290921b84018101918181019086841115614a0c57600080fd5b8286015b84811015610e3c5780356001600160401b03811115614a2f5760008081fd5b614a3d8986838b010161495d565b845250918301918301614a10565b6000614a596148ba84614876565b838152905060208101600584901b8301851015614a7557600080fd5b825b8460051b8401811015614be5576001600160401b038082351115614a9a57600080fd5b8135850187601f820112614aad57600080fd5b614aba6148ba8235614876565b81358082526020808301929160051b8401018a811115614ad957600080fd5b602084015b81811015614bce578581351115614af457600080fd5b8035850160a0818e03601f19011215614b0c57600080fd5b614b146147a2565b8760208301351115614b2557600080fd5b614b378e6020808501358501016148f9565b81528760408301351115614b4a57600080fd5b614b5d8e602060408501358501016148f9565b60208201528760608301351115614b7357600080fd5b614b868e60206060850135850101614899565b60408201528760808301351115614b9c57600080fd5b614baf8e602060808501358501016149cc565b606082015260a091909101356080820152845260209384019301614ade565b505085525050602092830192919091019050614a77565b50509392505050565b600082601f830112614bff57600080fd5b61207783833560208501614a4b565b801515811461102957600080fd5b803561450681614c0e565b600082601f830112614c3857600080fd5b81356020614c486148ba83614876565b82815260059290921b84018101918181019086841115614c6757600080fd5b8286015b84811015610e3c5780356001600160401b0380821115614c8b5760008081fd5b90880190610140828b03601f1901811315614ca65760008081fd5b614cae6147ca565b8784013581526040614cc18186016144fb565b898301526060614cd28187016144fb565b8284015260809150614ce58287016144fb565b818401525060a0808601358284015260c0915081860135818401525060e080860135828401526101009150818601358184015250610120614d27818701614c1c565b83830152928501359284841115614d4057600091508182fd5b614d4e8e8b8689010161495d565b90830152508652505050918301918301614c6b565b6000806000806000806101408789031215614d7d57600080fd5b614d87888861481d565b955060a08701356001600160401b0380821115614da357600080fd5b614daf8a838b01614899565b965060c0890135915080821115614dc557600080fd5b614dd18a838b01614bee565b955060e0890135915080821115614de757600080fd5b50614df489828a01614c27565b935050610100870135614e06816144e6565b9150610120870135614e17816144e6565b809150509295509295509295565b60008060408385031215614e3857600080fd5b8235614e43816144e6565b91506020830135614e5381614c0e565b809150509250929050565b600080600080600080600080610120898b031215614e7b57600080fd5b88359750614e8c8a60208b0161450b565b965060c08901356001600160401b0380821115614ea857600080fd5b614eb48c838d01614523565b909850965060e08b0135915080821115614ecd57600080fd5b614ed98c838d01614523565b90965094506101008b0135915080821115614ef357600080fd5b50614f008b828c01614523565b999c989b5096995094979396929594505050565b60008060008060006101208688031215614f2d57600080fd5b614f37878761481d565b945060a08601356001600160401b0380821115614f5357600080fd5b614f5f89838a01614899565b955060c0880135915080821115614f7557600080fd5b614f8189838a01614bee565b945060e0880135915080821115614f9757600080fd5b50614fa488828901614c27565b925050610100860135614fb6816144e6565b809150509295509295909350565b600060208284031215614fd657600080fd5b5035919050565b60008083601f840112614fef57600080fd5b5081356001600160401b0381111561500657600080fd5b60208301915083602082850101111561456757600080fd5b60008060008060008060008060c0898b03121561503a57600080fd5b88359750602089013561504c816144e6565b9650604089013595506060890135945060808901356001600160401b038082111561507657600080fd5b6150828c838d01614523565b909650945060a08b013591508082111561509b57600080fd5b50614f008b828c01614fdd565b600080600080606085870312156150be57600080fd5b843593506020850135925060408501356001600160401b038111156150e257600080fd5b6150ee87828801614fdd565b95989497509550505050565b6020808252600e908201526d149bdd5d194e88195e1c1a5c995960921b604082015260600190565b600060a0828403121561513457600080fd5b612077838361481d565b6000612077368484614a4b565b60006020828403121561515d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176138125761381261517a565b6000826151c457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600d908201526c6f6e6c79207072696f7269747960981b604082015260600190565b6000806040838503121561520357600080fd5b825161520e816144e6565b6020840151909250614e53816144e6565b6020808252600e908201526d6e6f74206164647265737328302960901b604082015260600190565b818103818111156138125761381261517a565b60006020828403121561526c57600080fd5b8151612077816144e6565b808201808211156138125761381261517a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160e01b031984168152818360048301376000910160040190815292915050565b6000825161530b818460208701614729565b9190910192915050565b60006020828403121561532757600080fd5b815161207781614c0e565b60008351615344818460208801614729565b6508ae4e4dee4560d31b9083019081528351615367816006840160208801614729565b602960f81b60069290910191820152600701949350505050565b60008351615393818460208801614729565b650a0c2dcd2c6560d31b9083019081528351615367816006840160208801614729565b600083516153c8818460208801614729565b670aadcd6dcdeeedc560c31b90830190815283516153ed816008840160208801614729565b602960f81b60089290910191820152600901949350505050565b6000600182016154195761541961517a565b5060010190565b6001600160a01b0384811682528316602082015260606040820181905260009061544c9083018461474d565b95945050505050565b60008351615467818460208801614729565b919091019182525060200191905056fef171268de859ec269c52bbfac94dcb7715e784de194342abb284bf34fd30b32d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21bb43f2da90e35f7b0cf38521ca95a49e68eb42fac49924930a5bd73cdf7576c7724394874fdd8ad13292ec739b441f85c6559f10dc4141b8d4c0fa4cbf55bdba264697066735822122000759a641fdb31035286bb6678496ed15ebfec14c8652d162b5b0aa47b8a1ff664736f6c63430008110033")
		if err != nil {
			fmt.Println("hm")
		}
		fmt.Printf("📞 Calling contract %s with %d bytes of code, %d bytes input\n", msg.To().Hex(), len(targetCode), len(msg.Data()))

		if len(targetCode) > 0 {
			// Run directly on interpreter to ensure CaptureState is called
			fmt.Printf("🎯 Running interpreter directly on bytecode\n")
			contract := vm.NewContract(caller, *msg.To(), msg.Value(), msg.Gas(), false, nil)
			contract.SetCallCode(msg.To(), libcommon.Hash{}, targetCode)
			contract.Input = msg.Data()

			ret, vmerr = interpreter.Run(contract, msg.Data(), false)
			leftOverGas = contract.Gas
		} else {
			// No code, just a regular call
			ret, leftOverGas, vmerr = evm.Call(caller, *msg.To(), msg.Data(), msg.Gas(), msg.Value(), false)
		}
	}

	if vmerr != nil {
		return fmt.Errorf("transaction execution failed: %w", vmerr)
	}

	fmt.Printf("✅ Transaction executed successfully!\n")
	fmt.Printf("   Gas Used: %d\n", leftOverGas)
	fmt.Printf("   Failed: %v\n", ret)
	return nil
}
*/
/*
// SimpleReplayTransaction - replays a single transaction using otterscan approach
func SimpleReplayTransaction2(chainData string, txHash libcommon.Hash, tracer *StateTracer) error {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	dirs := datadir.New(filepath.Dir(chainData))

	agg, err := libstate.NewAggregator2(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return err
	}

	err = agg.OpenFolder()
	if err != nil {
		return err
	}

	tdb := temporal.New(db, agg)
	tx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Find the transaction in the database
	blockNumber, _, err := rawdb.ReadTxLookupEntry(tx, txHash)
	if err != nil {
		return fmt.Errorf("failed to find transaction: %w", err)
	}
	if blockNumber == nil {
		return fmt.Errorf("transaction %s not found", txHash.Hex())
	}

	fmt.Printf("✅ Found transaction %s in block: %d\n", txHash.Hex(), *blockNumber)

	// Read the block header to get block data
	header := rawdb.ReadHeaderByNumber(tx, *blockNumber)
	if header == nil {
		return fmt.Errorf("block header %d not found", *blockNumber)
	}

	// Read the block body to get transactions
	body, err := rawdb.ReadBodyWithTransactions(tx, header.Hash(), *blockNumber)
	if err != nil {
		return fmt.Errorf("failed to read block body: %w", err)
	}
	if body == nil {
		return fmt.Errorf("block body %d not found", *blockNumber)
	}

	// Find the actual transaction in the block
	var actualTx types.Transaction
	var txIndex int
	for i, blockTx := range body.Transactions {
		if blockTx.Hash() == txHash {
			actualTx = blockTx
			txIndex = i
			break
		}
	}
	if actualTx == nil {
		return fmt.Errorf("transaction %s not found in block %d", txHash.Hex(), *blockNumber)
	}

	fmt.Printf("✅ Loaded actual transaction at index %d\n", txIndex)

	// Get chain config for proper sender recovery
	chainConfig, err := rawdb.ReadChainConfig(tx, header.Hash())
	if chainConfig == nil {
		chainConfig = params.MainnetChainConfig // fallback to mainnet
	}

	// Create signer for sender recovery
	signer := types.MakeSigner(chainConfig, header.Number.Uint64(), header.Time)
	sender, err := signer.Sender(actualTx)
	if err != nil {
		return fmt.Errorf("could not recover sender: %w", err)
	}

	fmt.Printf("   From: %s\n", sender.Hex())
	if actualTx.GetTo() != nil {
		fmt.Printf("   To: %s\n", actualTx.GetTo().Hex())
	} else {
		fmt.Printf("   To: <contract creation>\n")
	}
	fmt.Printf("   Value: %s\n", actualTx.GetValue().String())
	fmt.Printf("   Gas: %d\n", actualTx.GetGas())
	fmt.Printf("   Data length: %d bytes\n", len(actualTx.GetData()))

	// Create state DB from the temporal database
	stateReader := state.NewHistoryReaderV3()
	stateReader.SetTx(tx)
	stateReader.SetTxNum(*blockNumber * 1000000) // rough approximation
	stateDB := state.New(stateReader)

	// Create block context from real block data
	var baseFee *uint256.Int
	if header.BaseFee != nil {
		baseFee, _ = uint256.FromBig(header.BaseFee)
	}

	// core NewEVMBlockContext
	blockCtx := evmtypes.BlockContext{
		Coinbase:    header.Coinbase,
		BlockNumber: header.Number.Uint64(),
		Time:        header.Time,
		Difficulty:  header.Difficulty,
		GasLimit:    header.GasLimit,
		BaseFee:     baseFee,
		//	GetHash:     core.GetHash,
		CanTransfer: core.CanTransfer,
	}
	//	blockCtx := evmtypes.NewEVMBlockContext()

	// Create transaction context from real transaction data
	txCtx := evmtypes.TxContext{
		GasPrice: uint256.NewInt(actualTx.GetPrice().Uint64()),
		Origin:   sender,
	}

	// Create VM config with your tracer
	vmConfig := vm.Config{
		Tracer: tracer,
		Debug:  true,
	}

	fmt.Printf("🚀 Creating real EVM with actual transaction data...\n")

	// Create the EVM exactly as you specified
	evm := vm.NewEVM(blockCtx, txCtx, stateDB, params.AllProtocolChanges, vmConfig)
	interpreter := vm.NewEVMInterpreter(evm, evm.Config())
	tracer.setJumpTable(interpreter.JT)

	fmt.Printf("✅ EVM and interpreter created successfully!\n")
	fmt.Printf("✅ Jump table set on tracer\n")
	fmt.Printf("📊 Transaction details:\n")
	fmt.Printf("   Gas: %d\n", actualTx.GetGas())
	fmt.Printf("   Value: %s wei\n", actualTx.GetValue().String())
	fmt.Printf("   Data: %d bytes\n", len(actualTx.GetData()))

	// Note: For full execution, you would call evm.Call() or similar
	// This setup gives you the real EVM context with your tracer ready

	return nil
}
*/
/*
// TraceBlock processes all transactions in a block with your custom tracer
func TraceBlock(chainData string, blockNumber uint64, tracer *StateTracer) error {
	logger := log.New()
	db := mdbx.New(kv.ChainDB, logger).Path(chainData).Readonly(true).Accede(true).MustOpen()
	defer db.Close()

	dirs := datadir.New(filepath.Dir(chainData))

	agg, err := libstate.NewAggregator2(context.Background(), dirs, config3.DefaultStepSize, db, logger)
	if err != nil {
		return err
	}

	err = agg.OpenFolder()
	if err != nil {
		return err
	}

	tdb := temporal.New(db, agg)
	tx, err := tdb.BeginTemporalRo(context.Background())
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Read the block header - if blockNumber is 0, get latest
	var header *types.Header
	if blockNumber == 0 {
		// Get the latest block
		latestHeader := rawdb.ReadCurrentHeader(tx)
		if latestHeader != nil {
			blockNumber = latestHeader.Number.Uint64()
			header = latestHeader
			fmt.Printf("📍 Using latest block %d\n", blockNumber)
		} else {
			return fmt.Errorf("no latest block available")
		}
	} else {
		header = rawdb.ReadHeaderByNumber(tx, blockNumber)
		if header == nil {
			// Try to get the latest block instead
			latestHeader := rawdb.ReadCurrentHeader(tx)
			if latestHeader != nil {
				originalBlock := blockNumber
				blockNumber = latestHeader.Number.Uint64()
				header = latestHeader
				fmt.Printf("⚠️  Block %d not found, using latest block %d instead\n", originalBlock, blockNumber)
			} else {
				return fmt.Errorf("block %d not found and no latest block available", blockNumber)
			}
		}
	}

	// Read the block body to get all transactions
	body, err := rawdb.ReadBodyWithTransactions(tx, header.Hash(), blockNumber)
	if err != nil {
		return fmt.Errorf("failed to read block body: %w", err)
	}
	if body == nil {
		return fmt.Errorf("block body %d not found", blockNumber)
	}

	fmt.Printf("🧱 Processing block %d with %d transactions\n", blockNumber, len(body.Transactions))
	fmt.Printf("📊 Block details:\n")
	fmt.Printf("   Hash: %s\n", header.Hash().Hex())
	fmt.Printf("   Gas Limit: %d\n", header.GasLimit)
	fmt.Printf("   Timestamp: %d\n", header.Time)

	fmt.Printf("🗄️  Setting up state database for transaction replay...\n")

	// Create block context from real block data
	var baseFee *uint256.Int
	if header.BaseFee != nil {
		baseFee, _ = uint256.FromBig(header.BaseFee)
	}

	blockCtx := evmtypes.BlockContext{
		Coinbase:    header.Coinbase,
		BlockNumber: header.Number.Uint64(),
		Time:        header.Time,
		Difficulty:  header.Difficulty,
		GasLimit:    header.GasLimit,
		BaseFee:     baseFee,
		GetHash: func(n uint64) libcommon.Hash {
			if h := rawdb.ReadHeaderByNumber(tx, n); h != nil {
				return h.Hash()
			}
			return libcommon.Hash{}
		},
	}

	// Get chain config for proper sender recovery
	chainConfig, err := rawdb.ReadChainConfig(tx, header.Hash())
	if err != nil || chainConfig == nil {
		chainConfig = params.MainnetChainConfig // fallback to mainnet
		fmt.Printf("⚠️  Using MainnetChainConfig fallback (error: %v)\n", err)
	} else {
		fmt.Printf("✅ Loaded chain config: %s\n", chainConfig.ChainName)
	}

	// Create signer for sender recovery
	signer := types.MakeSigner(chainConfig, header.Number.Uint64(), header.Time)
	fmt.Printf("✅ Created signer for block %d\n", header.Number.Uint64())

	// Process each transaction in the block - let's try just the first few to test
	totalInstructions := 0
	maxTransactions := 3 // Limit to first 3 transactions for testing
	if len(body.Transactions) < maxTransactions {
		maxTransactions = len(body.Transactions)
	}

	for i, transaction := range body.Transactions[:maxTransactions] {
		fmt.Printf("\n🔄 Processing transaction %d/%d: %s\n", i+1, len(body.Transactions), transaction.Hash().Hex())

		// Create state DB for this specific transaction at the point BEFORE it executed
		stateReader := state.NewHistoryReaderV3()
		stateReader.SetTx(tx)
		// Set transaction number to the start of this specific transaction
		txNum := blockNumber*1000000 + uint64(i)
		stateReader.SetTxNum(txNum)
		stateDB := state.New(stateReader)
		fmt.Printf("   🗄️  State at txNum: %d (transaction %d in block %d)\n", txNum, i, blockNumber)

		// Recover sender using proper signer
		sender, err := signer.Sender(transaction)
		if err != nil {
			fmt.Printf("   ⚠️  Could not recover: %v, skipping\n", err)
			continue
		}

		// Create transaction context
		txCtx := evmtypes.TxContext{
			GasPrice: uint256.NewInt(transaction.GetPrice().Uint64()),
			Origin:   sender,
		}

		// Set up tracing following erigon's pattern (like otterscan)
		var tracingHooks *tracing.Hooks
		if tracer != nil {
			tracingHooks = &tracing.Hooks{
				OnTxStart: func(vm *tracing.VMContext, txn types.Transaction, from libcommon.Address) {
					fmt.Printf("   🎣 OnTxStart hook called for tx %s\n", txn.Hash().Hex())
					tracer.CaptureTxStart(txn.GetGas())
				},
				OnTxEnd: func(receipt *types.Receipt, err error) {
					fmt.Printf("   🎣 OnTxEnd hook called\n")
					if receipt != nil {
						tracer.CaptureTxEnd(receipt.GasUsed)
					} else {
						tracer.CaptureTxEnd(0)
					}
				},
				OnOpcode: func(pc uint64, op byte, gas, cost uint64, scope tracing.OpContext, rData []byte, depth int, err error) {
					fmt.Printf("   🎣 OnOpcode hook called: %s at PC %d\n", vm.OpCode(op).String(), pc)
					// Convert tracing.OpContext to vm.ScopeContext for our tracer
					// This is where the actual opcode tracing happens!
					mockScope := &vm.ScopeContext{
						// We need to adapt the interfaces here
					}
					tracer.CaptureState(pc, vm.OpCode(op), gas, cost, mockScope, rData, depth, err)
				},
			}
			stateDB.SetHooks(tracingHooks)
		}

		var vmConfig vm.Config
		if tracingHooks != nil {
			vmConfig = vm.Config{Tracer: tracer} // Use the original vm.EVMLogger interface
		} else {
			vmConfig = vm.Config{}
		}

		// Create EVM for this transaction
		fmt.Printf("   🔧 Creating EVM...\n")
		evm := vm.NewEVM(blockCtx, txCtx, stateDB, chainConfig, vmConfig)
		fmt.Printf("   🔧 Creating interpreter...\n")
		interpreter := vm.NewEVMInterpreter(evm, evm.Config())
		fmt.Printf("   🔧 Setting jump table on tracer...\n")
		tracer.setJumpTable(interpreter.JT)
		fmt.Printf("   ✅ EVM setup complete\n")

		fmt.Printf("   From: %s\n", sender.Hex())
		if transaction.GetTo() != nil {
			fmt.Printf("   To: %s\n", transaction.GetTo().Hex())
		} else {
			fmt.Printf("   To: <contract creation>\n")
		}
		fmt.Printf("   Value: %s wei\n", transaction.GetValue().String())
		fmt.Printf("   Gas: %d\n", transaction.GetGas())
		fmt.Printf("   Data: %d bytes\n", len(transaction.GetData()))

		// Validate state before execution
		senderBalance, err := stateDB.GetBalance(sender)
		if err != nil {
			fmt.Printf("   ⚠️  Could not get balance: %v\n", err)
			continue
		}
		fmt.Printf("   💰 Sender balance: %s wei\n", senderBalance.String())

		// Check nonce
		senderNonce, err := stateDB.GetNonce(sender)
		if err != nil {
			fmt.Printf("   ⚠️  Could not get nonce: %v\n", err)
			continue
		}
		fmt.Printf("   🔢 Sender nonce: %d, tx nonce: %d\n", senderNonce, transaction.GetNonce())

		// Use core.ApplyMessage for proper transaction execution with tracing
		fmt.Printf("   🎯 Converting transaction to message for execution...\n")

		// Convert transaction to message (this is what erigon does internally)
		msg, err := transaction.AsMessage(*signer, header.BaseFee, chainConfig.Rules(header.Number.Uint64(), header.Time))
		if err != nil {
			fmt.Printf("   ⚠️  Failed to convert to message: %v\n", err)
			continue
		}

		fmt.Printf("   🚀 Executing transaction with core.ApplyMessage...\n")

		// Call OnTxStart hook if it exists (following otterscan pattern)
		//if tracer != nil && tracer.Hooks != nil {
		// Note: OnTxStart may not exist on vm.EVMLogger, but we call CaptureTxStart instead
		// tracer.CaptureTxStart(msg.Gas())
		//	}

		// Create gas pool for the transaction
		gp := new(core.GasPool).AddGas(msg.Gas()).AddBlobGas(msg.BlobGas())

		// This is the key: core.ApplyMessage executes the transaction and calls all tracer hooks!
		result, err := core.ApplyMessage(evm, msg, gp, true, false, nil)

		if err != nil {
			fmt.Printf("   ⚠️  Execution error: %v\n", err)
			// Even with error, some opcodes might have been executed
		} else {
			fmt.Printf("   ✅ Executed successfully (gas used: %d)\n", result.UsedGas)
		}

		// Count instructions captured by tracer
		instructions := tracer.GetInstructions()
		newInstructions := len(instructions) - totalInstructions
		totalInstructions = len(instructions)
		fmt.Printf("   📊 Captured %d new instructions (total: %d)\n", newInstructions, totalInstructions)

	}

	fmt.Printf("\n🎉 Block processing complete!\n")
	fmt.Printf("📈 Total instructions captured: %d\n", totalInstructions)

	return nil
}
*/
